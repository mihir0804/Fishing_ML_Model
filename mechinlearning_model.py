# -*- coding: utf-8 -*-
"""MechinLearning_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PDTqHGXOHK3nAJeN5hJhk0izT6nDeiNT

## **Mechine Learning Model: XYZ**

## **Problem Definition**

## **Define Problem Statement:**

### Based on phishing

## **Import Neccessory Library**
"""

# Import Data Manipulation Library
import numpy as np
import pandas as pd

# Import Data Visualization Library
import seaborn as sns
import matplotlib.pyplot as plt

# Import Filter warning libraries
import warnings
warnings.filterwarnings('ignore')

# Import Logging Libraries
import logging
logging.basicConfig(level = logging.INFO,
                    filename = 'model.log',
                    filemode = 'w',
                    format = '%(asctime)s - %(message)s - %(levelname)s',
                    force = True)

# Import Scikit Learn Libraries
from sklearn.preprocessing import MinMaxScaler,StandardScaler,RobustScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error

"""## **Import Dataset Using Pandas function**"""

# Importing Dataset Using Pandas Function
df = pd.read_csv('/content/dataset_phishing - dataset_phishing.csv')

# Suffle data set into 100%
df.sample(frac = 1)

logging.info("Model has been called using pandas function")

df = df.drop(columns = 'url')

df

"""## **Checking Information about Dataset**"""

df.info()

"""## **Checking Null Values Information**"""

plt.figure(figsize = (6,12))
df.isnull().sum().plot(kind = 'barh')
plt.tight_layout()
plt.title('checking Null Values Information')
plt.show()

"""## **Segregate Numerical Columns and Categorical Column**"""

numerical_col = df.select_dtypes(include = np.number)
categorical_col = df.select_dtypes(exclude = np.number)

"""## **EDA:Checking Univariate Analysis**"""

pd.set_option('display.max_columns',None)
pd.set_option('display.max_rows',None)
# EDA : Univariate Analysis

from collections import OrderedDict

stats = []

for i in df.columns:
  numerical_stats = OrderedDict({
      'Feature' : i,
      'Count':df[i].count(),
      'Minimum':df[i].min(),
      'Maximum':df[i].max(),
      'Mean':df[i].mean(),
      'Median':df[i].median(),
      'Standard Deviation':df[i].std(),
      'Skewness' : df[i].skew(),
      'Kurtosis' : df[i].kurt(),
      'Q1':df[i].quantile(0.25),
      'Q3':df[i].quantile(0.75),
      'IQR':df[i].quantile(0.75)-df[i].quantile(0.25)
  })
  stats.append(numerical_stats)
  report = pd.DataFrame(stats)

report

"""## **EDA: BI Variate Analysis**"""



"""## **Data Imputation**"""



"""## **Data Insights**"""



"""## **Split the Dataset into X and y**"""



"""## **Use train_test_split**"""



"""## **Balancing Target Column: In case of  **"""